$button_radius: 20px;

.quick-settings {
  padding: $base_padding * 3;
  border-radius: $modal_radius * 2.25;

  // Apply combined style to the main Quick Settings container
  border-top: 1px solid $top_light_color;
  border-left-width: 0px;
  border-right-width: 0px;
  border-bottom-width: 0px;
  border-style: solid none none none;
  box-shadow: inset 0 -1px 0 $bottom_shadow_color;

  .icon-button, .button {
    padding: $base_padding * 1.75; // Keep padding

    // Combined style for default state
    border-top: 1px solid $top_light_color;
    border-left-width: 0px;
    border-right-width: 0px;
    border-bottom-width: 0px;
    border-style: solid none none none;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color;
    border-radius: $button_radius;

    &:hover,
    &:focus {
      // Preserve existing background color changes, apply combined border/shadow
      border-top: 1px solid $top_light_color !important;
      border-left-width: 0px !important;
      border-right-width: 0px !important;
      border-bottom-width: 0px !important;
      border-style: solid none none none !important;
      box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
      border-radius: $button_radius; // Removed !important
    }
    &:active {
      // Preserve existing background color changes, apply combined border/shadow
      border-top: 1px solid $top_light_color !important;
      border-left-width: 0px !important;
      border-right-width: 0px !important;
      border-bottom-width: 0px !important;
      border-style: solid none none none !important;
      box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
      border-radius: $button_radius; // Removed !important
    }
  }
}

.quick-settings-grid {
  spacing-rows: $base_padding * 2;
  spacing-columns: $base_padding * 2;
}

.quick-toggle, .quick-toggle-has-menu {
  // Applying combined style: top border-top, bottom box-shadow
  border-top: 1px solid $top_light_color;
  border-left-width: 0px;
  border-right-width: 0px;
  border-bottom-width: 0px;
  border-style: solid none none none; // Ensure only top border is from 'border' property
  box-shadow: inset 0 -1px 0 $bottom_shadow_color;
  border-radius: $button_radius;
  min-width: 12em;
  max-width: 12em;
  min-height: $scalable_icon_size * 3; // use icon size so the button scales
}

// standalone toggle button
.quick-toggle {
  // Default state inherits from the .quick-toggle, .quick-toggle-has-menu rule

  &:hover,
  &:focus {
    // Preserve existing background color changes, apply combined border/shadow
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius; // Removed !important
  }

  &:active {
    // Preserve existing background color changes, apply combined border/shadow
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius; // Removed !important
  }

  &:checked {
    @extend %default_button; // Keep for background, text color, etc.
    // Override border/shadow from %default_button
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius; // Removed !important here

    // Hover, focus, active states on a :checked toggle
    // These will inherit the :hover, :focus, :active rules from above
    // unless %default_button defines more specific :checked:hover states
    // that would also need overriding for borders/shadows.
    // For now, assuming the general :hover/:focus/:active are sufficient.
  }

  & > StBoxLayout { spacing: $base_padding * 1.5; }

  /* Move padding into the box; this is to allow menu arrows
     to extend to the border */
  &.button { padding: 0; }
  & > StBoxLayout {
    padding: 0 $base_padding * 2;
  }

  &:ltr > StBoxLayout { padding-left: $base_padding * 2.5; }
  &:rtl > StBoxLayout { padding-right: $base_padding * 2.5; }

  .quick-toggle-title {
    @extend %heading;
  }

  .quick-toggle-subtitle {
    @extend %caption;
    font-weight: normal;
  }

  .quick-toggle-icon { icon-size: $scalable_icon_size; }
}

// toggle with a menu button
.quick-toggle-has-menu {
  // The .quick-toggle-has-menu parent itself gets the main borders and radius
  // from the .quick-toggle, .quick-toggle-has-menu rule.
  // Children should not have their own top/bottom borders.
  & .quick-toggle {
    min-width: auto;
    max-width: auto;
    // Children get no border or shadow; parent container provides it.
    border: none !important;
    box-shadow: none !important;
    // border-left and border-right are implicitly none unless set by other rules

    // Default state LTR/RTL rules
    &:ltr {
      border-radius: $button_radius 0 0 $button_radius;
      > StBoxLayout { padding-right: $scaled_padding * 1.5; }
    }
    &:rtl {
      border-radius: 0 $button_radius $button_radius 0;
      > StBoxLayout { padding-left: $scaled_padding * 1.5; }
    }
    // Default state for :last-child (single button appearance)
    &:ltr:last-child { border-radius: $button_radius; }
    &:rtl:last-child { border-radius: $button_radius; }

    // States: override general .quick-toggle:state !important rules for border-radius
    &:hover, &:focus, &:active, &:checked {
      // Ensure child parts have NO border/shadow from general state rules.
      // Parent container provides the visual border/shadow for the unit.
      border: none !important;
      box-shadow: none !important;

      // Only apply this special radius if it's part of a split button (i.e., not the only child).
      // If it IS :last-child, it will correctly inherit border-radius: $button_radius !important;
      // from the general .quick-toggle:state rules (e.g., .quick-toggle:hover).
      &:not(:last-child) {
        &:ltr {
          border-radius: $button_radius 0 0 $button_radius !important;
        }
        &:rtl {
          border-radius: 0 $button_radius $button_radius 0 !important;
        }
      }
    }
  }

  & .quick-toggle-menu-button {
    padding: $scaled_padding $scaled_padding * 1.75;
    // Children get no border or shadow; parent container provides it.
    border: none !important;
    box-shadow: none !important;
    // Specific border-radius for LTR/RTL is preserved below

    &:ltr {
      border-radius: 0 $button_radius $button_radius 0; // Default LTR radius
      // Ensure states also maintain this specific radius
      &:hover, &:focus, &:active, &:checked {
        border: none !important; // Add this
        box-shadow: none !important; // Add this
        border-radius: 0 $button_radius $button_radius 0 !important;
      }
    }
    &:rtl {
      border-radius: $button_radius 0 0 $button_radius; // Default RTL radius
      // Ensure states also maintain this specific radius
      &:hover, &:focus, &:active, &:checked {
        border: none !important; // Add this
        box-shadow: none !important; // Add this
        border-radius: $button_radius 0 0 $button_radius !important;
      }
    }
  }

  & .quick-toggle-separator {
    width: 1px;
  }
}


// Set the color of separators and menu buttons within the toggle.
// This is bit of a mess but needed to have working colors in
// both light, dark and high contrast styles.

// menu button colors
$quick_toggle_menubutton_bg_color: if(
  $contrast == 'high', lighten($bg_color, 22%),
  if($variant == 'light', darken($bg_color, 5%), lighten($bg_color, 8%))
);
$quick_toggle_menubutton_checked_bg_color: if(
  $contrast == 'high', st-mix($theme_color, $fg_color, 75%),
  if($variant == 'light', st-mix($theme_color, $fg_color, 92%), st-mix($theme_color, $fg_color, 85%))
);

// separator colors
$quick_toggle_separator_color: if(
  $contrast == 'high', transparent,
  transparentize($fg_color, .75)
);

$quick_toggle_checked_separator_color: if(
  $contrast == 'high', transparent,
  if($variant == 'light', st-mix(-st-accent-fg-color, $theme_color, 20%), st-mix(-st-accent-fg-color, $theme_color, 30%),)
);

.quick-toggle-has-menu {
  & .quick-toggle-menu-button {
    @include button(normal, $c: $quick_toggle_menubutton_bg_color);
    &:focus { @include button(focus, $c: $quick_toggle_menubutton_bg_color);}
    &:hover { @include button(hover, $c: $quick_toggle_menubutton_bg_color);}
    &:active { @include button(active, $c: $quick_toggle_menubutton_bg_color);}

    &:checked {
      @include button(normal, $c: $quick_toggle_menubutton_checked_bg_color, $tc:-st-accent-fg-color, $style: default);
      &:focus { @include button(focus, $c: $quick_toggle_menubutton_checked_bg_color, $tc:-st-accent-fg-color, $style: default);}
      &:hover { @include button(hover, $c: $quick_toggle_menubutton_checked_bg_color, $tc:-st-accent-fg-color, $style: default);}
      &:active { @include button(active, $c: $quick_toggle_menubutton_checked_bg_color, $tc:-st-accent-fg-color, $style: default);}
    }
  }

  &:checked {
    & .quick-toggle-separator {
      background-color: $quick_toggle_checked_separator_color;
    }
  }

  & .quick-toggle-separator {
    background-color: $quick_toggle_separator_color;
  }
}

// Ensure the .quick-toggle-has-menu container itself maintains the combined style in all states.
// (Default style is from the shared .quick-toggle, .quick-toggle-has-menu rule)
.quick-toggle-has-menu {
  &:hover,
  &:focus {
    // Preserve any background changes, ensure combined border/shadow
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important;
  }

  &:active {
    // Preserve any background changes, ensure combined border/shadow
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important;
  }

  &:checked {
    // Preserve any background changes (e.g. from its own :checked rule for separator color),
    // ensure combined border/shadow for the container.
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important;
  }
}

.quick-slider {
  & > StBoxLayout { spacing: $base_padding; }

  .icon-button {
    padding: $base_padding; // Keep existing padding

    // Remove borders and shadow, make default background transparent
    border-width: 0px !important;
    box-shadow: none !important;
    background-color: transparent !important;

    // Ensure border/shadow remain off in other states
    // Background changes for these states will be inherited or can be set explicitly if needed
    &:hover,
    &:focus,
    &:active,
    &:checked { // Cover all common states
      border-width: 0px !important;
      box-shadow: none !important;
      // If these states should also be transparent, add:
      // background-color: transparent !important; // or a very subtle hover/active transparent background
    }
  }

  .slider-bin {
    padding: $base_padding;
    border-width: 0px; // Remove borders from default state
    border-radius: $button_radius; // Keep radius

    &:focus {
      @include button(focus); // Apply focus style from mixin (e.g., background change)
      border-width: 0px !important; // Ensure no borders are (re)added by the focus mixin
      box-shadow: none !important; // Also remove any box-shadow the focus mixin might add
    }
  }
}

.quick-toggle-menu {
  @extend %card;

  &:insensitive {
    // override insensitive style on submenu
    @include button(normal);
  }

  border-radius: $base_border_radius * 3;

  margin: $base_padding * 2 $base_padding * 3 0;

  .popup-menu-item > StIcon {
    -st-icon-style: symbolic;
    icon-size: $scalable_icon_size;
  }

  & .header {
    spacing-rows: $base_padding * 0.5;
    spacing-columns: $base_padding * 2;
    padding-bottom: $base_padding * 2;

    & .icon {
      icon-size: $medium_scalable_icon_size;
      border-radius: $forced_circular_radius;
      padding: 1.5 * $base_padding;
      background-color: transparentize($fg_color, 0.8);

      &.active {
        background-color: $theme_color;
        color: -st-accent-fg-color;
      }

      // draw hc outline
      @if $contrast == 'high' {
        @include draw_hc_inset();
        &.active {
          @include draw_hc_inset($no_inset: true);
        }
      }
    }

    & .title {
      @extend %title_3;
    }

    & .subtitle {
      @extend %caption_heading;
    }
  }
}

.quick-toggle-menu-container {
}

.quick-settings-system-item {
  & > StBoxLayout { spacing: $base_padding * 2; }

  & .power-item {
    min-height: 0;
    min-width: 0;

    &:insensitive {
      @include button(normal);
      background-color: transparent;
    }
  }
}

.nm-network-item {
  .wireless-secure-icon { icon-size: $scalable_icon_size * 0.5; } // half-size symbolic
}

.bt-device-item {
  .popup-menu-icon { -st-icon-style: symbolic; }
}

.bt-menu-placeholder.popup-menu-item {
  @extend %title_4;
  text-align: center;

  padding: 2em 4em;
}

.device-subtitle { color: transparentize($fg_color, 0.5); }

.keyboard-brightness-level {
  spacing: $base_padding;

  .button {
    // Apply combined style to keyboard brightness buttons
    // Using !important for default state here due to potential specificity conflicts
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important; // Assuming $button_radius is appropriate

    &:hover,
    &:focus {
      // Combined style for hover/focus states
      // Background changes should be handled by existing theme rules
      border-top: 1px solid $top_light_color !important;
      border-left-width: 0px !important;
      border-right-width: 0px !important;
      border-bottom-width: 0px !important;
      border-style: solid none none none !important;
      box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
      border-radius: $button_radius !important;
    }

    &:active {
      // Combined style for active state
      border-top: 1px solid $top_light_color !important;
      border-left-width: 0px !important;
      border-right-width: 0px !important;
      border-bottom-width: 0px !important;
      border-style: solid none none none !important;
      box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
      border-radius: $button_radius !important;
    }

    &:checked {
      @extend %default_button; // Keep for background, text color, etc.
      // Override border/shadow from %default_button
      border-top: 1px solid $top_light_color !important;
      border-left-width: 0px !important;
      border-right-width: 0px !important;
      border-bottom-width: 0px !important;
      border-style: solid none none none !important;
      box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
      border-radius: $button_radius !important;
    }
  }
}

// background apps

.background-apps-quick-toggle {
  min-height: to_em(40px);
  background-color: transparent; // Keep this

  // Apply combined style, using !important for default state due to transparent background
  // and to ensure consistency with other explicitly styled toggles.
  border-top: 1px solid $top_light_color !important;
  border-left-width: 0px !important;
  border-right-width: 0px !important;
  border-bottom-width: 0px !important;
  border-style: solid none none none !important;
  box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
  border-radius: $button_radius !important;

  & StIcon { icon-size: $scalable_icon_size !important; } // Keep this

  &:hover,
  &:focus {
    // Background might change on hover based on general rules, or stay transparent.
    // Combined style should persist.
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important;
  }

  &:active {
    // Combined style for active state
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important;
  }

  &:checked {
    // Background might change when checked (e.g., to an accent color if it were opaque)
    // or it might remain transparent. The borders/shadow should appear.
    // Using !important for consistency.
    border-top: 1px solid $top_light_color !important;
    border-left-width: 0px !important;
    border-right-width: 0px !important;
    border-bottom-width: 0px !important;
    border-style: solid none none none !important;
    box-shadow: inset 0 -1px 0 $bottom_shadow_color !important;
    border-radius: $button_radius !important;
  }
}

.background-app-item {
  & .title { @extend %heading; }
  & .subtitle { @extend %caption; }
  & .popup-menu-icon {
    icon-size: $large_icon_size !important;
    -st-icon-style: regular !important;
  }
  & .icon-button {
    padding: $base_padding;

    // override some background colors since it's a button on an already styled background
    // FIXME: may need a generic drawing method for button in menu item in future
    background-color: transparentize($fg_color, 0.87);
    &:hover { background-color: transparentize($fg_color, 0.78);}
    &:active { background-color: transparentize($fg_color, 0.69);}
  }
  & .spinner {
    padding: $base_padding;
  }

  &.popup-inactive-menu-item { color: $fg_color; }
}
